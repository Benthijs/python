# Load Larger LSTM network and generate text
import sys
import numpy
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.utils import np_utils
from string import ascii_letters as alphabet
# load ascii text and covert to lowercase
filename = "AliceWonderland_Sample.txt"
raw_text = open(filename).read().replace('\n', ' ')
raw_text = raw_text.lower()
# create mapping of unique chars to integers, and a reverse mapping
chars = sorted(list(set(raw_text)))
alpha = set(alphabet)
bad = set(set(chars) - (set(alpha).union(set(' '))))
for i in bad:
    raw_text = raw_text.replace(i, '')
vocab = list(raw_text.split(" "))
#vocab = filter(lambda a: a != '', vocab)
vocabulary = list(set(vocab) - set(bad).union(set(' ')))
#print set(bad).union(set(' '))
#del vocabulary[0]
char_to_int = dict((c, i) for i, c in enumerate(vocabulary))
int_to_char = dict((i, c) for i, c in enumerate(vocabulary))
# summarize the loaded data
n_chars = len(vocab)
n_vocab = len(vocabulary)
print("Total Characters: ", n_chars)
print("Total Vocab: ", n_vocab)
# prepare the dataset of input to output pairs encoded as integers
seq_length = 100
dataX = []
dataY = []
for i in range(0, len(vocab) - seq_length, 1):
    seq_in = vocab[i:i + seq_length]
    seq_out = vocab[i + seq_length]
    dataX.append([char_to_int[word] for word in seq_in])
    dataY.append(char_to_int[seq_out])
n_patterns = len(dataX)
print("Total Patterns: ", n_patterns)
# reshape X to be [samples, time steps, features]
X = numpy.reshape(dataX, (n_patterns, seq_length, 1))
# normalize
X = X / float(n_vocab)
# one hot encode the output variable
y = np_utils.to_categorical(dataY)
# define the LSTM model
model = Sequential()
model.add(LSTM(256, input_shape=(X.shape[1], X.shape[2]), return_sequences=True))
model.add(Dropout(0.5))
model.add(LSTM(256))
model.add(Dropout(0.3))
model.add(Dense(y.shape[1], activation='softmax'))
# load the network weights
filename = "weights-improvement-200-1.2106.hdf5"
model.load_weights(filename)
model.compile(loss='categorical_crossentropy', optimizer='adam')
# pick a random seed
start = numpy.random.randint(0, len(dataX) - 1)
pattern = dataX[start]
print("Seed:")
print(' '.join([int_to_char[value] for value in pattern]))
# generate characters
print("Text generated by model:")
for i in range(seq_length):
    x = numpy.reshape(pattern, (1, len(pattern), 1))
    x = x / float(n_vocab)
    prediction = model.predict(x, verbose=0)
    index = numpy.argmax(prediction)
    result = int_to_char[index]
    seq_in = [int_to_char[value] for value in pattern]
    sys.stdout.write(result + ' ')
    if(i == seq_length - 1 and result != ' '):
        seq_length += 1
    pattern.append(index)
    pattern = pattern[1:len(pattern)]
    # print pattern
print('\nDone')
